# backend/app/services/notification_service.py
from typing import Dict, Any
from datetime import datetime

class NotificationService:
    """
    –°–µ—Ä–≤–∏—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (email, push, SMS)
    """
    def __init__(self):
        print("‚úÖ Notification Service –∑–∞–≥—Ä—É–∂–µ–Ω")

    def send_notification(self, user_id: int, title: str, message: str, method: str = "push") -> Dict[str, Any]:
        try:
            notification = {
                "user_id": user_id,
                "title": title,
                "message": message,
                "method": method,
                "status": "sent",
                "timestamp": datetime.now().isoformat()
            }
            print(f"üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {notification}")
            return {"success": True, "notification": notification}
        except Exception as e:
            return {"success": False, "error": str(e)}

    def send_appointment_reminder(self, user_id: int, doctor_name: str, time: str) -> Dict[str, Any]:
        title = "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –ø—Ä–∏—ë–º–µ"
        message = f"–£ –≤–∞—Å –ø—Ä–∏—ë–º —É –≤—Ä–∞—á–∞ {doctor_name} –≤ {time}"
        return self.send_notification(user_id, title, message, method="push")

    def send_analysis_result(self, user_id: int, analysis_type: str, status: str) -> Dict[str, Any]:
        title = f"–†–µ–∑—É–ª—å—Ç–∞—Ç {analysis_type}"
        message = f"–ê–Ω–∞–ª–∏–∑ {analysis_type} –≥–æ—Ç–æ–≤: {status}"
        return self.send_notification(user_id, title, message, method="push")