# backend/app/medical_ai/ecg_analyzer.py
import neurokit2 as nk
import numpy as np
from typing import Dict, Any

class EnhancedECGAnalyzer:
    """
    –£–ª—É—á—à–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –≠–ö–ì —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º NeuroKit2
    """
    def __init__(self):
        print("üß† –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ –≠–ö–ì...")

    def analyze_ecg(self, ecg_data: np.ndarray, sampling_rate: int = 500) -> Dict[str, Any]:
        """
        –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≠–ö–ì-—Å–∏–≥–Ω–∞–ª –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–µ—Ç—Ä–∏–∫–∏
        """
        try:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–∞
            signals, info = nk.ecg_process(ecg_data, sampling_rate=sampling_rate)
            heart_rate = int(np.mean(nk.ecg_rate(signals, sampling_rate=sampling_rate)))

            # –ê–Ω–∞–ª–∏–∑ —Ä–∏—Ç–º–∞
            peaks = info["ECG_R_Peaks"]
            rr_intervals = np.diff(peaks) / sampling_rate * 1000
            rhythm = "–°–∏–Ω—É—Å–æ–≤—ã–π —Ä–∏—Ç–º" if np.std(rr_intervals) < 50 else "–ù–∞—Ä—É—à–µ–Ω–∏–µ —Ä–∏—Ç–º–∞"

            # QTc –∏–Ω—Ç–µ—Ä–≤–∞–ª
            qtc = "–ù–æ—Ä–º–∞" if info.get("ECG_QT_Mean", 400) < 450 else "–£–¥–ª–∏–Ω—ë–Ω"

            return {
                "heart_rate": heart_rate,
                "rhythm": rhythm,
                "qt_interval": info.get("ECG_QT_Mean", "N/A"),
                "qtc": qtc,
                "confidence": 0.95,
                "raw_data_shape": ecg_data.shape
            }
        except Exception as e:
            return {"error": str(e)}